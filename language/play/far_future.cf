zero :: struct { }
succ :: (_: type) => struct { }

nat :: (_: type) => interface {
  value: u64;
}
impl :: nat(zero) {
  value = 0;
}
impl :: (T: type) => nat(succ(T)) {
  value = nat(T)::value + 1;
}

plus :: (L <: nat, R) => interface
  requires nat(R)
{
  type t;
  requires nat(t);
  // equivalent:
  // type t <: nat;
}

impl :: (Rhs <: nat) => plus(zero, Rhs) {
  type t = Rhs;
}

impl :: (Lhs, Rhs) => plus(succ(Lhs), Rhs)
  requires plus(Lhs, Rhs)
{
  type t = succ(plus(Lhs, Rhs)::t);
}
/* also valid (and equivalent)
impl :: (Rhs, Lhs <: plus(Rhs)) => plus(succ(Lhs), Rhs) {
  type t = succ(plus(Lhs, Rhs)::t);
}
*/

//

optional :: (T) => enum {
  some: T;
  none: ();
}

//

is_some :: (T) => fn(
  opt: optional(T),
  _: to_show_off_multiple_params,
) -> bool {
  // unknown what the match syntax will be yet
  // probably similar to Rust
  match opt {
    some _ => true;
    none () => false;
  }
}

// equivalent to
//   foo: (T <: nat) -> fn(t: T) -> u64 { T::value }
// perhaps?
// this will *not* be in an early version of the language
foo :: fn(t: nat) -> u64 {
  typeof(t)::value
}
